/*======================================================================*
 * Copyright (c) 2008, Yahoo! Inc. All rights reserved.                 *
 *                                                                      *
 * Licensed under the New BSD License (the "License"); you may not use  *
 * this file except in compliance with the License.  Unless required    *
 * by applicable law or agreed to in writing, software distributed      *
 * under the License is distributed on an "AS IS" BASIS, WITHOUT        *
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     *
 * See the License for the specific language governing permissions and  *
 * limitations under the License. See accompanying LICENSE file.        *
 *======================================================================*/

options {
  DEBUG_PARSER=false;
  DEBUG_LOOKAHEAD=false;
  DEBUG_TOKEN_MANAGER=false;
  JAVA_UNICODE_ESCAPE = true ; 
  STATIC=false;
}

PARSER_BEGIN(ESFParser)

package org.lwes.db;

import java.math.BigInteger;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.lwes.FieldType;
import org.lwes.util.IPAddress;

public class ESFParser
{

    private static transient Log log = LogFactory.getLog(ESFParser.class);

  private String currentEvent;
  private EventTemplateDB eventTemplateDB;

  private StringBuilder commentAccumulator = new StringBuilder();

  public void setEventTemplateDB(EventTemplateDB DB)
    { eventTemplateDB = DB; }

  public EventTemplateDB getEventTemplateDB()
    { return eventTemplateDB; }

  public void setCurrentEvent(String evt)
    { currentEvent = evt; }

  public String getCurrentEvent()
    { return currentEvent; }

  public String removeQuotes(String str) {
    return str.replace("\"","");
  }
}

PARSER_END(ESFParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}


/* COMMENTS: we want to parse them and store them with the field definitions */


TOKEN :
{
  <SINGLE_LINE_COMMENT: "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")?> 
}





TOKEN :
{
    < REQ: "required" >
  | < NULLABLE: "nullable" >
  | < OPT: "optional" >
  | < TRUE: "true" >
  | < FALSE: "false" >
  | < LBRACKET: "[" >
  | < RBRACKET: "]" >
  | < BIG_INTEGER_LITERAL: ["1"-"9"]["0"-"9"]["0"-"9"]["0"-"9"]["0"-"9"]["0"-"9"]["0"-"9"]["0"-"9"]["0"-"9"]["0"-"9"] (["0"-"9"])* >
  | < INTEGER_LITERAL: ("-")? ["1"-"9"] (["0"-"9"])* >
  | < IPADDR_LITERAL:  (["0"-"9"])+ "." (["0"-"9"])+ "." (["0"-"9"])+ "." (["0"-"9"])+ >
  | < STRING_LITERAL: "\""(<ID>)"\"" >
  | < DOUBLE_LITERAL: ("-")? (["0"-"9"])+ "." (["0"-"9"])* >
  | < ID: ["a"-"z","A"-"Z","_",":","0"-"9","."] (["a"-"z","A"-"Z","_",":","0"-"9","."])* >

}

/**
 * A list of events
 */
void eventlist() :
{
    String aComment = null;
}
{
  ( 
// take care of comments at the end of the esf
    LOOKAHEAD ( (comment())+ <EOF> )
	comment()
  |
    (aComment=comment())* event() 
   )* <EOF> 
}

/**
 * a single event
 */
void event() :
{
}
{
  eventName() "{" [ attributeList() ] "}"
}

/**
 * The name of an event, should be max 256 chars ([a-zA-Z0-9_]*)
 */
void eventName() :
{
  Token t;
}
{
  t=<ID>
  {
    if (getEventTemplateDB().addEvent(t.image,commentAccumulator.toString()))
    {
      commentAccumulator.setLength(0);
      setCurrentEvent(t.image);
    }
    else
    {
      throw new ParseException("Problem adding event "+t.image);
    }
  }
}

void attributeList() :
{}
{
  (comment())* attribute() ( attribute() )*
}

String stringLiteral() :
{
    Token t;
}
{
    t = <STRING_LITERAL>
    {
       return removeQuotes(t.image);
    }
}

boolean booleanLiteral() :
{}
{
  <TRUE>
  {
    return true;
  }
  |
  <FALSE>
  {
    return false;
  }
}

int integerLiteral() :
{
    Token t;
}
{
  t = <INTEGER_LITERAL>
  {
    try {
      return Integer.parseInt(t.image);
    } catch (NumberFormatException e) {
      throw new Error();
    }
  }
}

BigInteger bigIntegerLiteral() :
{
    Token t;
}
{
  t = <BIG_INTEGER_LITERAL>
  {
    return new BigInteger(t.image);
  }
}

IPAddress ipaddrLiteral() :
{
    Token t;
}
{
  t = <IPADDR_LITERAL>
  {
    return new IPAddress(t.image);
  }
}

double doubleLiteral() :
{
    Token t;
}
{
    t = <DOUBLE_LITERAL>
    {
       try {
         return Double.parseDouble(t.image);
       } catch (NumberFormatException e) {
         throw new Error();
       }
    }
}

Object defaultValue() :
{
    Object obj;
}
{
    obj = integerLiteral()
    {
      return obj;
    }
    | obj = bigIntegerLiteral()
    {
      return obj;
    }
    | obj = doubleLiteral()
    {
      return obj;
    }
    | obj = booleanLiteral()
    {
      return obj;
    }
    | obj = stringLiteral()
    {
      return obj;
    }
    | obj = ipaddrLiteral()
    {
      return obj;
    }
}

boolean required() :
{
}
{
    <REQ>
    {
      return true;
    }
    | <OPT>
    {
      return false;
    }
}

boolean nullable() :
{
}
{
    <NULLABLE>
    {
      return true;
    }
}

void attribute() :
{
  FieldType aType;
  String anAttribute;
  int anArraySize = 0;
  boolean required = false;
  boolean nullable = false;
  Object aDefaultValue = null;
  String aComment = null;
}
{
  (((required = required()) [ (nullable = nullable()) ] (aType=type() anAttribute=attributeName() [ "[" anArraySize = integerLiteral() "]" ] [ "=" aDefaultValue = defaultValue() ] ";" ( aComment=comment() )* ))
|
  [ (nullable = nullable()) ](aType=type() anAttribute=attributeName() [ "[" anArraySize = integerLiteral() "]" ] [ "=" aDefaultValue = defaultValue() ] ";"   ( aComment=comment() )*  )  ) {
      String evt = getCurrentEvent();
      if ( evt == null ) throw new ParseException("Bad Event");

      if (log.isTraceEnabled()) {
        log.trace("Type: "+aType+" attr: "+anAttribute+" size: "+anArraySize);
        log.trace("Required: "+required+" nullable: "+nullable);
        log.trace("default value: "+aDefaultValue);
      }

      if (nullable && anArraySize == 0) {
        throw new ParseException("nullable keyword is only valid for arrays");
      }

      if (anArraySize > 0) {
        if (nullable) {
          aType = aType.getNullableArrayType();
        } else {
          aType = aType.getArrayType();
        }
      }

      if ( !getEventTemplateDB().addEventAttribute(evt,
                                                   anAttribute,
                                                   aType,
                                                   anArraySize,
                                                   required,
                                                   aDefaultValue,
						                           commentAccumulator.toString()
		))
      {
        throw new ParseException("Problem adding attribute "+evt+"("
                                 +aType+","+anAttribute+")");
      }
      // after comment is stored, reset accumulator
      commentAccumulator.setLength(0);
   }
}

FieldType type() :
{
  Token t;
}
{
  t=<ID>
  {
    return FieldType.byName(t.image);
  }
}

String attributeName() :
{
  Token t;
}
{
  t=<ID>
  {
    return t.image;
  }
}

String comment() :
{
    Token t;
}
{
   t=<SINGLE_LINE_COMMENT>
   {
    commentAccumulator.append(t.image);
    return commentAccumulator.toString();
    }
}
